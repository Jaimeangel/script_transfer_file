import pandas as pd
import logging
from decimal import Decimal
from datetime import datetime

# Configuración del log
logging.basicConfig(
    filename="validation.log",
    level=logging.INFO,
    format="%(levelname)s - %(message)s"
)

# Diccionario de especificaciones con los nuevos campos:
#   - Para 'NUMBER': {"type": "NUMBER", "mindigits": ..., "maxdigits": ..., "decimalplaces": ..., "optional": ...}
#   - Para 'DATE':   {"type": "DATE",   "format": ...,                     "optional": ...}
#   - Para 'VARCHAR':{"type": "VARCHAR","max_length": ...,                 "optional": ...}
field_specs = {
    "valor_1": {
        "type": "NUMBER",
        "mindigits": 1,
        "maxdigits": 1,
        "decimalplaces": 0,
        "optional": False
    },
    "valor_2": {
        "type": "NUMBER",
        "mindigits": 1,
        "maxdigits": 8,
        "decimalplaces": 4,
        "optional": False
    },
    "valor_3": {
        "type": "NUMBER",
        "mindigits": 1,
        "maxdigits": 19,
        "decimalplaces": 0,
        "optional": False
    },
    "valor_4": {
        "type": "DATE",
        "format": "%Y%m%d",  # Ajusta tu formato de fecha
        "optional": False
    },
    "valor_5": {
        "type": "VARCHAR",
        "max_length": 1,
        "optional": False
    },
    "valor_6": {
        "type": "VARCHAR",
        "max_length": 20,
        "optional": False
    },
}


def validate_number(value, mindigits, maxdigits, decimalplaces, optional):
    """
    Valida un valor numérico según mindigits, maxdigits y decimalplaces.
    Retorna None si es válido, o un mensaje de error si es inválido.
    """
    # Caso opcional: si el valor está vacío y es opcional, no marca error
    if optional and (value is None or str(value).strip() == ""):
        return None

    # Si no es opcional y está vacío, marcar error
    if not optional and (value is None or str(value).strip() == ""):
        return "Valor vacío; se esperaba un número obligatorio."

    # Intentar convertir a Decimal
    try:
        decimal_value = Decimal(value)
    except:
        return f"No es un número válido: {value}"

    # Separar parte entera y decimal
    sign_stripped = str(decimal_value).lstrip("-")
    integer_part, _, decimal_part = sign_stripped.partition(".")
    decimal_part = decimal_part.ljust(decimalplaces, "0")  # Ajustar decimales si faltan

    # Contar dígitos totales
    total_digits = len(integer_part) + len(decimal_part)

    # Validar dígitos totales exactos (mindigits)
    if total_digits < mindigits:
        return f"Tiene menos de {mindigits} dígitos totales: {value}"
    if total_digits > maxdigits:
        return f"Excede los {maxdigits} dígitos totales permitidos: {value}"

    # Validar número de decimales exactos
    if len(decimal_part) != decimalplaces:
        return f"Debe tener exactamente {decimalplaces} decimales: {value}"

    return None  # Sin error



def validate_date(value, date_format, optional):
    """
    Valida que 'value' sea una fecha con el 'date_format' indicado.
    Si 'optional' es True y está vacío/None, no marca error.
    Retorna None si es válido, o mensaje de error si es inválido.
    """
    if optional and (value is None or str(value).strip() == ""):
        return None
    
    if not optional and (value is None or str(value).strip() == ""):
        return "Valor vacío; se esperaba una fecha obligatoria."

    try:
        datetime.strptime(str(value), date_format)
    except ValueError:
        return f"Fecha inválida o formato no coincide ({date_format}): {value}"
    
    return None


def validate_varchar(value, max_length, optional):
    """
    Valida que 'value' no exceda max_length, o si es obligatorio, que no sea vacío.
    Retorna None si es válido, o mensaje de error si es inválido.
    """
    if optional and (value is None or str(value).strip() == ""):
        return None
    
    if not optional and (value is None or str(value).strip() == ""):
        return "Valor vacío; se esperaba texto obligatorio."

    if len(str(value)) > max_length:
        return f"Excede la longitud máxima permitida ({max_length}): {value}"

    return None


def validate_row(row):
    """
    Valida una fila (dict) según 'field_specs'.
    Devuelve lista de errores (vacía si no hay errores).
    """
    errors = []
    for field, spec in field_specs.items():
        value = row.get(field, None)
        field_type = spec["type"]
        optional = spec["optional"]

        if field_type == "NUMBER":
            err = validate_number(
                value,
                spec["mindigits"],
                spec["maxdigits"],
                spec["decimalplaces"],
                optional
            )
        elif field_type == "DATE":
            err = validate_date(value, spec["format"], optional)
        elif field_type == "VARCHAR":
            err = validate_varchar(value, spec["max_length"], optional)
        else:
            err = f"Tipo desconocido '{field_type}' para '{field}'."

        if err:
            errors.append(f"{field}: {err}")

    return errors


def process_tcl_file(file_path):
    """
    Lee el archivo .TCL con pandas, usando las claves de field_specs como nombres de columna.
    Aplica validaciones y registra errores en el log.
    """
    df = pd.read_csv(file_path, header=None, names=list(field_specs.keys()), dtype=str)

    if df.empty:
        logging.info("El archivo está vacío; no se encontraron filas para validar.")
        return

    any_error = False

    for index, row in df.iterrows():
        row_dict = row.to_dict()
        errors = validate_row(row_dict)
        if errors:
            any_error = True
            logging.error("Fila %d inválida. Errores:\n  %s", index, "\n  ".join(errors))
        else:
            logging.info("Fila %d válida.", index)

    if not any_error:
        logging.info("No se encontraron valores incorrectos en el archivo.")


if __name__ == "__main__":
    process_tcl_file("interfaz.tcl")

